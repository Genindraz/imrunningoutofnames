From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Tue, 3 May 2022 23:43:04 +1000
Subject: [PATCH] Add multipaper key-value data storage


diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 4485e50a4ce952638f78694223a24ad7b69ebdcd..904748314c846a6fa0851488aa336bebbfa6a376 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -57,6 +57,7 @@ import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import io.papermc.paper.util.JarManifests; // Paper
+import puregero.multipaper.MultiPaperDataStorage;
 
 /**
  * Represents the Bukkit core, for version and Server singleton handling
@@ -855,6 +856,17 @@ public final class Bukkit {
     public static String getLocalServerName() {
         return server.getLocalServerName();
     }
+
+    /**
+     * Gets the multipaper key-value data storage. Accessing this data is
+     * asynchronous. This storage medium is hosted on the Master instance.
+     *
+     * @return the multipaper data storage
+     */
+    @NotNull
+    public static MultiPaperDataStorage getMultiPaperDataStorage() {
+        return server.getMultiPaperDataStorage();
+    }
     // MultiPaper end
 
     /**
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 2b1ea1f427dc757b9e5da656cb9cb341acd00d00..8d6220333acfc0cea807eb8fa077e78e2730e477 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -57,6 +57,7 @@ import org.bukkit.util.CachedServerIcon;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
+import puregero.multipaper.MultiPaperDataStorage;
 
 /**
  * Represents a server implementation.
@@ -722,6 +723,15 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      */
     @NotNull
     public String getLocalServerName();
+
+    /**
+     * Gets the multipaper key-value data storage. Accessing this data is
+     * asynchronous. This storage medium is hosted on the Master instance.
+     *
+     * @return the multipaper data storage
+     */
+    @NotNull
+    public MultiPaperDataStorage getMultiPaperDataStorage();
     // MultiPaper end
 
     /**
diff --git a/src/main/java/puregero/multipaper/MultiPaperDataStorage.java b/src/main/java/puregero/multipaper/MultiPaperDataStorage.java
new file mode 100644
index 0000000000000000000000000000000000000000..44d552450efc1f2ad9d031ce754e165a9b59f3e2
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperDataStorage.java
@@ -0,0 +1,75 @@
+package puregero.multipaper;
+
+import java.util.Map;
+import java.util.concurrent.CompletableFuture;
+
+/**
+ * Asynchronous key-value storage hosted on the Master instance.
+ */
+public interface MultiPaperDataStorage {
+
+    CompletableFuture<String> get(String key);
+
+    default CompletableFuture<String> get(String key, String def) {
+        return get(key).thenApply(value -> value != null ? value : def);
+    }
+
+    default CompletableFuture<Long> getLong(String key) {
+        return get(key).thenApply(Long::parseLong);
+    }
+
+    default CompletableFuture<Long> getLong(String key, long def) {
+        return getLong(key).exceptionally(throwable -> def);
+    }
+
+    default CompletableFuture<Integer> getInt(String key) {
+        return get(key).thenApply(Integer::parseInt);
+    }
+
+    default CompletableFuture<Integer> getInt(String key, int def) {
+        return getInt(key).exceptionally(throwable -> def);
+    }
+
+    default CompletableFuture<Double> getDouble(String key) {
+        return get(key).thenApply(Double::parseDouble);
+    }
+
+    default CompletableFuture<Double> getDouble(String key, double def) {
+        return getDouble(key).exceptionally(throwable -> def);
+    }
+
+    default CompletableFuture<Map<String, String>> list() {
+        return list(null);
+    }
+
+    CompletableFuture<Map<String, String>> list(String prefix);
+
+    CompletableFuture<String> set(String key, String value);
+
+    default CompletableFuture<Long> set(String key, long value) {
+        return set(key, Long.toString(value)).thenApply(Long::parseLong);
+    }
+
+    default CompletableFuture<Integer> set(String key, int value) {
+        return set(key, Integer.toString(value)).thenApply(Integer::parseInt);
+    }
+
+    default CompletableFuture<Double> set(String key, double value) {
+        return set(key, Double.toString(value)).thenApply(Double::parseDouble);
+    }
+
+    CompletableFuture<String> add(String key, String increment);
+
+    default CompletableFuture<Long> add(String key, long increment) {
+        return add(key, Long.toString(increment)).thenApply(Long::parseLong);
+    }
+
+    default CompletableFuture<Integer> add(String key, int increment) {
+        return add(key, Integer.toString(increment)).thenApply(Integer::parseInt);
+    }
+
+    default CompletableFuture<Double> add(String key, double increment) {
+        return add(key, Double.toString(increment)).thenApply(Double::parseDouble);
+    }
+
+}
