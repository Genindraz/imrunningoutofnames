From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 2 Jun 2022 16:35:35 +1000
Subject: [PATCH] Allow config files to be overriden through the command line


diff --git a/src/main/java/io/papermc/paper/configuration/Configurations.java b/src/main/java/io/papermc/paper/configuration/Configurations.java
index 9ef6712c70fcd8912a79f3f61e351aac09572cf3..96475a7101c6bf44ad227cda8b50c5e8df0e1fab 100644
--- a/src/main/java/io/papermc/paper/configuration/Configurations.java
+++ b/src/main/java/io/papermc/paper/configuration/Configurations.java
@@ -111,6 +111,21 @@ public abstract class Configurations<G, W> {
         }
     }
 
+    // MultiPaper start - allow command line override
+    private void setFromProperties(String prefix, ConfigurationNode node) {
+        for (Map.Entry<Object, Object> property : System.getProperties().entrySet()) {
+            if (property.getKey().toString().startsWith(prefix)) {
+                String key = property.getKey().toString().substring(prefix.length());
+                try {
+                    node.node((Object[]) key.split("\\.")).set(property.getValue());
+                } catch (SerializationException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+    // MultiPaper end - allow command line override
+
     protected G initializeGlobalConfiguration(final CheckedFunction<ConfigurationNode, G, SerializationException> creator) throws ConfigurateException {
         final Path configFile = this.globalFolder.resolve(this.globalConfigFileName);
         final YamlConfigurationLoader loader = this.createGlobalLoaderBuilder()
@@ -124,6 +139,7 @@ public abstract class Configurations<G, W> {
             node = CommentedConfigurationNode.root(loader.defaultOptions());
         }
         this.applyGlobalConfigTransformations(node);
+        setFromProperties("paper.global.", node); // MultiPaper - allow command line override
         final G instance = creator.apply(node);
         trySaveFileNode(loader, node, configFile.toString());
         return instance;
@@ -151,6 +167,7 @@ public abstract class Configurations<G, W> {
             node.node(Configuration.VERSION_FIELD).raw(WorldConfiguration.CURRENT_VERSION);
         }
         this.applyWorldConfigTransformations(contextMap, node);
+        setFromProperties("paper.world.defaults.", node); // MultiPaper - allow command line override
         final W instance = node.require(this.worldConfigClass);
         node.set(this.worldConfigClass, instance);
         trySaveFileNode(loader, node, configFile.toString());
diff --git a/src/main/java/net/minecraft/server/dedicated/Settings.java b/src/main/java/net/minecraft/server/dedicated/Settings.java
index faca42b2b5b20559f98c300b7011b67165391a0d..c43bd9a235686957f8774d4cfd16f381ec2fcb18 100644
--- a/src/main/java/net/minecraft/server/dedicated/Settings.java
+++ b/src/main/java/net/minecraft/server/dedicated/Settings.java
@@ -40,6 +40,12 @@ public abstract class Settings<T extends Settings<T>> {
     }
 
     private String getOverride(String name, String value) {
+        // MultiPaper start - Allow properties to be set from the command line
+        if (System.getProperty("properties." + name) != null) {
+            return System.getProperty("properties." + name);
+        }
+        // MultiPaper end
+
         if ((this.options != null) && (this.options.has(name)) && !name.equals( "online-mode")) { // Spigot
             return String.valueOf(this.options.valueOf(name));
         }
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 612c3169c3463d702b85975e1db79ae6e47d60d0..ce129408ab2c17c9841dd1dca416fb73f2a92995 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -141,12 +141,14 @@ public class SpigotConfig
 
     private static boolean getBoolean(String path, boolean def)
     {
+        if (System.getProperty("spigot." + path) != null) return Boolean.getBoolean("spigot." + path); // MultiPaper
         SpigotConfig.config.addDefault( path, def );
         return SpigotConfig.config.getBoolean( path, SpigotConfig.config.getBoolean( path ) );
     }
 
     private static int getInt(String path, int def)
     {
+        if (System.getProperty("spigot." + path) != null) return Integer.getInteger("spigot." + path); // MultiPaper
         SpigotConfig.config.addDefault( path, def );
         return SpigotConfig.config.getInt( path, SpigotConfig.config.getInt( path ) );
     }
@@ -159,12 +161,14 @@ public class SpigotConfig
 
     private static String getString(String path, String def)
     {
+        if (System.getProperty("spigot." + path) != null) return System.getProperty("spigot." + path); // MultiPaper
         SpigotConfig.config.addDefault( path, def );
         return SpigotConfig.config.getString( path, SpigotConfig.config.getString( path ) );
     }
 
     private static double getDouble(String path, double def)
     {
+        if (System.getProperty("spigot." + path) != null) return Double.parseDouble(System.getProperty("spigot." + path)); // MultiPaper
         SpigotConfig.config.addDefault( path, def );
         return SpigotConfig.config.getDouble( path, SpigotConfig.config.getDouble( path ) );
     }
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 5b5109e942b18418b3a3a0e2109fe4ef15045fe5..53606c196c8056e27270a083a56924af5f12fdfb 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -41,12 +41,16 @@ public class SpigotWorldConfig
 
     public boolean getBoolean(String path, boolean def)
     {
+        if (System.getProperty("spigot.world-settings." + this.worldName + "." + path) != null) return Boolean.getBoolean("spigot.world-settings." + this.worldName + "." + path); // MultiPaper
+        if (!this.config.contains( "world-settings." + this.worldName + "." + path) && System.getProperty("spigot.world-settings.default." + path) != null) return Boolean.getBoolean("spigot.world-settings.default." + path); // MultiPaper
         this.config.addDefault( "world-settings.default." + path, def );
         return this.config.getBoolean( "world-settings." + this.worldName + "." + path, this.config.getBoolean( "world-settings.default." + path ) );
     }
 
     public double getDouble(String path, double def)
     {
+        if (System.getProperty("spigot.world-settings." + this.worldName + "." + path) != null) return Double.parseDouble(System.getProperty("spigot.world-settings." + this.worldName + "." + path)); // MultiPaper
+        if (!this.config.contains( "world-settings." + this.worldName + "." + path) && System.getProperty("spigot.world-settings.default." + path) != null) return Double.parseDouble(System.getProperty("spigot.world-settings.default." + path)); // MultiPaper
         this.config.addDefault( "world-settings.default." + path, def );
         return this.config.getDouble( "world-settings." + this.worldName + "." + path, this.config.getDouble( "world-settings.default." + path ) );
     }
@@ -63,6 +67,8 @@ public class SpigotWorldConfig
     }
     public int getInt(String path, int def, boolean setDef)
     {
+        if (System.getProperty("spigot.world-settings." + this.worldName + "." + path) != null) return Integer.getInteger("spigot.world-settings." + this.worldName + "." + path); // MultiPaper
+        if (!this.config.contains( "world-settings." + this.worldName + "." + path) && System.getProperty("spigot.world-settings.default." + path) != null) return Integer.getInteger("spigot.world-settings.default." + path); // MultiPaper
         if (setDef) this.config.addDefault( "world-settings.default." + path, def );
         return this.config.getInt( "world-settings." + this.worldName + "." + path, this.config.getInt( "world-settings.default." + path, def ) );
         // Paper end
@@ -76,6 +82,8 @@ public class SpigotWorldConfig
 
     public String getString(String path, String def)
     {
+        if (System.getProperty("spigot.world-settings." + this.worldName + "." + path) != null) return System.getProperty("spigot.world-settings." + this.worldName + "." + path); // MultiPaper
+        if (!this.config.contains( "world-settings." + this.worldName + "." + path) && System.getProperty("spigot.world-settings.default." + path) != null) return System.getProperty("spigot.world-settings.default." + path); // MultiPaper
         this.config.addDefault( "world-settings.default." + path, def );
         return this.config.getString( "world-settings." + this.worldName + "." + path, this.config.getString( "world-settings.default." + path ) );
     }
diff --git a/src/main/java/puregero/multipaper/config/MultiPaperConfigurationLoader.java b/src/main/java/puregero/multipaper/config/MultiPaperConfigurationLoader.java
index f0ec43cb2051ee6c74856cf24c8d26bec1dd61a3..18c3cf68df39065dcb99eb11199e2ccf0cd096cf 100644
--- a/src/main/java/puregero/multipaper/config/MultiPaperConfigurationLoader.java
+++ b/src/main/java/puregero/multipaper/config/MultiPaperConfigurationLoader.java
@@ -69,7 +69,12 @@ public class MultiPaperConfigurationLoader {
             if (property.getKey().toString().startsWith("multipaper.")) {
                 String key = property.getKey().toString().substring("multipaper.".length());
                 try {
-                    node.node((Object[]) key.split("\\.")).set(property.getValue());
+                    String value = ((String) property.getValue());
+                    if(value.contains(";")) {
+                        node.node((Object[]) key.split("\\.")).set(value.split(";"));
+                    } else {
+                        node.node((Object[]) key.split("\\.")).set(value);
+                    }
                 } catch (SerializationException e) {
                     e.printStackTrace();
                 }
