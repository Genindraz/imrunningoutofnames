From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 25 Nov 2021 17:43:58 +1000
Subject: [PATCH] Sync player files


diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index 69d349613f01ab0ac1890734657da52984704f29..7c22cd3bc416c04ee7818f870486c9e51b93580c 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -13,6 +13,7 @@ import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.JsonOps;
 import java.io.BufferedWriter;
 import java.io.IOException;
+import java.io.StringReader;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.LinkOption;
@@ -44,6 +45,8 @@ import net.minecraft.server.players.PlayerList;
 import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.level.GameRules;
 import org.slf4j.Logger;
+import puregero.multipaper.ExternalPlayer;
+import puregero.multipaper.MultiPaper;
 
 public class PlayerAdvancements {
 
@@ -124,9 +127,13 @@ public class PlayerAdvancements {
     }
 
     private void load(ServerAdvancementManager advancementLoader) {
-        if (Files.isRegularFile(this.playerSavePath, new LinkOption[0])) {
+        // MultiPaper start
+        String json = ExternalPlayer.loadedAdvancements.remove(player.getUUID());
+        if (json == null) json = MultiPaper.readAdvancements(player.server.storageSource.levelDirectory.path().getFileName().toString(), player.getStringUUID());
+        if ((json != null && !json.isEmpty()) || Files.isRegularFile(this.playerSavePath, new LinkOption[0])) {
+        // MultiPaper end
             try {
-                JsonReader jsonreader = new JsonReader(Files.newBufferedReader(this.playerSavePath, StandardCharsets.UTF_8));
+                JsonReader jsonreader = new JsonReader(new StringReader(json)); // MultiPaper
 
                 try {
                     jsonreader.setLenient(false);
@@ -179,8 +186,9 @@ public class PlayerAdvancements {
         this.registerListeners(advancementLoader);
     }
 
-    public void save() {
-        if (org.spigotmc.SpigotConfig.disableAdvancementSaving) return; // Spigot
+
+    // MultiPaper start - create generateJson() from save()
+    public JsonElement generateJson() {
         Map<ResourceLocation, AdvancementProgress> map = new LinkedHashMap();
         Iterator iterator = this.progress.entrySet().iterator();
 
@@ -197,7 +205,22 @@ public class PlayerAdvancements {
 
         jsonelement.getAsJsonObject().addProperty("DataVersion", SharedConstants.getCurrentVersion().getDataVersion().getVersion());
 
+        return jsonelement;
+    }
+
+    public void save() {
+        if (org.spigotmc.SpigotConfig.disableAdvancementSaving) return; // Spigot
+        JsonElement jsonelement = generateJson();
+        // MultiPaper end
+
         try {
+            // MultiPaper start
+            if (true) {
+                MultiPaper.writeAdvancements(player.server.storageSource.levelDirectory.path().getFileName().toString(), player.getStringUUID(), PlayerAdvancements.GSON.toJson(jsonelement));
+                return;
+            }
+            // MultiPaper end
+
             FileUtil.createDirectoriesSafe(this.playerSavePath.getParent());
             BufferedWriter bufferedwriter = Files.newBufferedWriter(this.playerSavePath, StandardCharsets.UTF_8);
 
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 30518e842c67ea383177d83b467ae2fe722f8bb2..0db98625eec0c5af4a44ccb620d543d20829b843 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -568,6 +568,7 @@ public abstract class PlayerList {
 
     protected void save(ServerPlayer player) {
         if (!player.getBukkitEntity().isPersistent()) return; // CraftBukkit
+        if (MultiPaper.isExternalPlayer(player)) return; // MultiPaper
         player.lastSave = MinecraftServer.currentTick; // Paper
         this.playerIo.save(player);
         ServerStatsCounter serverstatisticmanager = (ServerStatsCounter) player.getStats(); // CraftBukkit
diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index 9bb8d4d7be6a937980aa653db82be084d066a563..f1301cb54a142cc4faa9926cab2c1c406fef5c7c 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -23,6 +23,7 @@ import java.util.Map.Entry;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
+import java.util.UUID;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.core.Registry;
@@ -37,6 +38,8 @@ import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.entity.player.Player;
 import org.apache.commons.io.FileUtils;
 import org.slf4j.Logger;
+import puregero.multipaper.ExternalPlayer;
+import puregero.multipaper.MultiPaper;
 
 public class ServerStatsCounter extends StatsCounter {
 
@@ -48,11 +51,20 @@ public class ServerStatsCounter extends StatsCounter {
     public ServerStatsCounter(MinecraftServer server, File file) {
         this.server = server;
         this.file = file;
-        if (file.isFile()) {
+        // MultiPaper start
+        String json = null, uuid = this.file.getName().split("\\.")[0];
+        try {
+            json = ExternalPlayer.loadedStats.remove(UUID.fromString(uuid));
+        } catch (IllegalArgumentException e) {
+            LOGGER.warn("Invalid UUID was passed, possible a plugin doing weird stuff?, you can safely ignore this if you are using such plugins: {}", e.getMessage());
+        }
+        if (json == null) json = MultiPaper.readStats(server.storageSource.levelDirectory.path().getFileName().toString(), uuid);
+        if (json != null && !json.isEmpty() /*file.isFile()*/) {
+        // MultiPaper end
             try {
-                this.parseLocal(server.getFixerUpper(), FileUtils.readFileToString(file));
-            } catch (IOException ioexception) {
-                ServerStatsCounter.LOGGER.error("Couldn't read statistics file {}", file, ioexception);
+                this.parseLocal(server.getFixerUpper(), json /*FileUtils.readFileToString(file)*/); // MultiPaper
+//            } catch (IOException ioexception) { // MultiPaper
+//                ServerStatsCounter.LOGGER.error("Couldn't read statistics file {}", file, ioexception); // MultiPaper
             } catch (JsonParseException jsonparseexception) {
                 ServerStatsCounter.LOGGER.error("Couldn't parse statistics file {}", file, jsonparseexception);
             }
@@ -69,12 +81,14 @@ public class ServerStatsCounter extends StatsCounter {
 
     public void save() {
         if ( org.spigotmc.SpigotConfig.disableStatSaving ) return; // Spigot
-        try {
-            FileUtils.writeStringToFile(this.file, this.toJson());
-        } catch (IOException ioexception) {
-            ServerStatsCounter.LOGGER.error("Couldn't save stats", ioexception);
-        }
-
+        // MultiPaper start
+        //try {
+        MultiPaper.writeStats(server.storageSource.levelDirectory.path().getFileName().toString(), this.file.getName().split("\\.")[0], this.toJson());
+            //FileUtils.writeStringToFile(this.file, this.toJson());
+        // } catch (Exception ioexception) {
+        //    ServerStatsCounter.LOGGER.error("Couldn't save stats", ioexception);
+        // }
+        // MultiPaper end
     }
 
     @Override
@@ -199,7 +213,7 @@ public class ServerStatsCounter extends StatsCounter {
         return nbttagcompound;
     }
 
-    protected String toJson() {
+    public String toJson() { // MultiPaper - make public
         Map<StatType<?>, JsonObject> map = Maps.newHashMap();
         ObjectIterator objectiterator = this.stats.object2IntEntrySet().iterator();
 
diff --git a/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java b/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
index 36af81f0957d17e170d229059c66f4eb4539dfeb..fd97d17610b8053fb78ee07ab2a9033d31ec8161 100644
--- a/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
+++ b/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
@@ -17,15 +17,18 @@ import org.slf4j.Logger;
 import java.io.FileInputStream;
 import java.io.InputStream;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
+import puregero.multipaper.MultiPaper;
 // CraftBukkit end
 
 public class PlayerDataStorage {
 
     private static final Logger LOGGER = LogUtils.getLogger();
     private final File playerDir;
+    private final LevelStorageSource.LevelStorageAccess session; // MultiPaper
     protected final DataFixer fixerUpper;
 
     public PlayerDataStorage(LevelStorageSource.LevelStorageAccess session, DataFixer dataFixer) {
+        this.session = session; // MultiPaper
         this.fixerUpper = dataFixer;
         this.playerDir = session.getLevelPath(LevelResource.PLAYER_DATA_DIR).toFile();
         this.playerDir.mkdirs();
@@ -35,6 +38,14 @@ public class PlayerDataStorage {
         if (org.spigotmc.SpigotConfig.disablePlayerDataSaving) return; // Spigot
         try {
             CompoundTag nbttagcompound = player.saveWithoutId(new CompoundTag());
+
+            // MultiPaper start
+            if (true) {
+                MultiPaper.writePlayer(session.levelDirectory.path().getFileName().toString(), player.getStringUUID(), nbttagcompound);
+                return;
+            }
+            // MultiPaper end
+        
             File file = File.createTempFile(player.getStringUUID() + "-", ".dat", this.playerDir);
 
             NbtIo.writeCompressed(nbttagcompound, file);
@@ -53,6 +64,9 @@ public class PlayerDataStorage {
         CompoundTag nbttagcompound = null;
 
         try {
+            nbttagcompound = MultiPaper.readPlayer(session.levelDirectory.path().getFileName().toString(), player.getStringUUID()); // MultiPaper
+
+            if (false) { // MultiPaper
             File file = new File(this.playerDir, player.getStringUUID() + ".dat");
             // Spigot Start
             boolean usingWrongFile = false;
@@ -76,11 +90,13 @@ public class PlayerDataStorage {
                 file.renameTo( new File( file.getPath() + ".offline-read" ) );
             }
             // Spigot End
+            } // MultiPaper
         } catch (Exception exception) {
             PlayerDataStorage.LOGGER.warn("Failed to load player data for {}", player.getName().getString());
         }
 
         if (nbttagcompound != null) {
+            /* // MultiPaper
             // CraftBukkit start
             if (player instanceof ServerPlayer) {
                 CraftPlayer player1 = (CraftPlayer) player.getBukkitEntity();
@@ -91,6 +107,7 @@ public class PlayerDataStorage {
                 }
             }
             // CraftBukkit end
+            */ // MultiPaper
             int i = NbtUtils.getDataVersion(nbttagcompound, -1);
 
             player.load(ca.spottedleaf.dataconverter.minecraft.MCDataConverter.convertTag(ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry.PLAYER, nbttagcompound, i, net.minecraft.SharedConstants.getCurrentVersion().getDataVersion().getVersion())); // Paper - replace player converter
@@ -102,6 +119,8 @@ public class PlayerDataStorage {
     // CraftBukkit start
     public CompoundTag getPlayerData(String s) {
         try {
+            if (true) return MultiPaper.readPlayer(session.levelDirectory.path().getFileName().toString(), s); // MultiPaper
+
             File file1 = new File(this.playerDir, s + ".dat");
 
             if (file1.exists()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 720a81da72a8002ff02cc39e5fca42354519c742..f66134430bbb0fa3238c4bf53483ec80bd9943e9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -173,6 +173,7 @@ import org.bukkit.scoreboard.Scoreboard;
 import org.jetbrains.annotations.NotNull;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import puregero.multipaper.MultiPaper;
 
 @DelegateDeserialization(CraftOfflinePlayer.class)
 public class CraftPlayer extends CraftHumanEntity implements Player {
@@ -1433,6 +1434,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void saveData() {
+        if (MultiPaper.isExternalPlayer(this.getHandle())) return; // MultiPaper
         server.getHandle().playerIo.save(this.getHandle());
     }
 
diff --git a/src/main/java/puregero/multipaper/ExternalPlayer.java b/src/main/java/puregero/multipaper/ExternalPlayer.java
index 491237ceccbfd536970137e69efdfa70ed593e0d..f7eca42db18350535739b5eee6ecd2764684617d 100644
--- a/src/main/java/puregero/multipaper/ExternalPlayer.java
+++ b/src/main/java/puregero/multipaper/ExternalPlayer.java
@@ -19,15 +19,21 @@ import org.bukkit.craftbukkit.CraftWorld;
 
 import javax.annotation.Nullable;
 import java.net.InetSocketAddress;
+import java.util.HashMap;
+import java.util.UUID;
 
 public class ExternalPlayer extends ServerPlayer {
 
     private static final Logger LOGGER = LogManager.getLogger(ExternalPlayer.class.getSimpleName());
+    public static HashMap<UUID, String> loadedAdvancements = new HashMap<>();
+    public static HashMap<UUID, String> loadedStats = new HashMap<>();
     public ExternalServerConnection externalServerConnection;
     private final InetSocketAddress address;
     private boolean sendPackets = true;
 
-    public static ExternalPlayer create(ExternalServerConnection externalServerConnection, GameProfile gameProfile, String world, double x, double y, double z, float yaw, float pitch, GameType gamemode, InetSocketAddress address, CompoundTag saveData) {
+    public static ExternalPlayer create(ExternalServerConnection externalServerConnection, GameProfile gameProfile, String world, double x, double y, double z, float yaw, float pitch, GameType gamemode, InetSocketAddress address, CompoundTag saveData, String advancements, String stats) {
+        loadedAdvancements.put(gameProfile.getId(), advancements);
+        loadedStats.put(gameProfile.getId(), stats);
         return new ExternalPlayer(externalServerConnection, gameProfile, world, x, y, z, yaw, pitch, gamemode, address, saveData);
     }
 
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 7988362343fa73635eab7f0338ac70803dab82e2..b8954d67c1d50c9fcdf8f96d800721db67d5ec0d 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -388,6 +388,34 @@ public class MultiPaper {
         }
     }
 
+    public static CompoundTag readPlayer(String world, String uuid) throws IOException {
+        byte[] data = getConnection().sendAndAwaitReply(new ReadPlayerMessage(world, uuid), DataMessageReply.class).thenApply(message -> message.data).join();
+
+        return data.length == 0 ? null : NbtIo.readCompressed(new ByteArrayInputStream(data));
+    }
+
+    public static void writePlayer(String world, String uuid, CompoundTag compoundTag) throws IOException {
+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
+        NbtIo.writeCompressed(compoundTag, buffer);
+        getConnection().send(new WritePlayerMessage(world, uuid, buffer.toByteArray()), message -> { /* do nothing */ });
+    }
+
+    public static String readAdvancements(String world, String uuid) {
+        return getConnection().sendAndAwaitReply(new ReadAdvancementMessage(world, uuid), DataMessageReply.class).thenApply(message -> new String(message.data, StandardCharsets.UTF_8)).join();
+    }
+
+    public static void writeAdvancements(String world, String uuid, String json) {
+        getConnection().send(new WriteAdvancementsMessage(world, uuid, json.getBytes(StandardCharsets.UTF_8)), message -> { /* do nothing */ });
+    }
+
+    public static String readStats(String world, String uuid) {
+        return getConnection().sendAndAwaitReply(new ReadStatsMessage(world, uuid), DataMessageReply.class).thenApply(message -> new String(message.data, StandardCharsets.UTF_8)).join();
+    }
+
+    public static void writeStats(String world, String uuid, String json) {
+        getConnection().send(new WriteStatsMessage(world, uuid, json.getBytes(StandardCharsets.UTF_8)), message -> { /* do nothing */ });
+    }
+
     private static String getWorld(File path) {
         do {
             path = path.getParentFile();
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
index cab651911ef8f1739a65477a88b8f5eff84dfb1b..c078112553a058c0f72fe1ac584556f413513dd4 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
@@ -32,6 +32,8 @@ public class PlayerCreatePacket extends ExternalServerPacket {
     private final byte[] ip;
     private final short port;
     private final CompoundTag saveData;
+    private final String advancements;
+    private final String stats;
 
     private PlayerCreatePacket(ServerPlayer player, CompoundTag saveData) {
         this.gameProfile = player.gameProfile;
@@ -45,6 +47,8 @@ public class PlayerCreatePacket extends ExternalServerPacket {
         this.ip = ((InetSocketAddress) player.connection.connection.address).getAddress().getAddress();
         this.port = (short) ((InetSocketAddress) player.connection.connection.address).getPort();
         this.saveData = saveData;
+        this.advancements = player.getAdvancements().generateJson().toString();
+        this.stats = player.getStats().toJson();
     }
 
     public PlayerCreatePacket(FriendlyByteBuf in) {
@@ -60,6 +64,9 @@ public class PlayerCreatePacket extends ExternalServerPacket {
         ip = in.readByteArray();
         port = in.readShort();
         saveData = in.readNbt();
+
+        advancements = in.readUtf(Integer.MAX_VALUE / 6); // divide by 6 cause mojang's code doesn't allow for a full 2^31-1 max length
+        stats = in.readUtf(Integer.MAX_VALUE / 6);
     }
 
     @Override
@@ -75,6 +82,9 @@ public class PlayerCreatePacket extends ExternalServerPacket {
         out.writeByteArray(ip);
         out.writeShort(port);
         out.writeNbt(saveData);
+
+        out.writeUtf(advancements, Integer.MAX_VALUE / 6); // divide by 6 cause mojang's code doesn't allow for a full 2^31-1 max length
+        out.writeUtf(stats, Integer.MAX_VALUE / 6);
     }
 
     @Override
@@ -94,7 +104,7 @@ public class PlayerCreatePacket extends ExternalServerPacket {
                 e.printStackTrace();
             }
 
-            ExternalPlayer.create(connection, gameProfile, world, x, y, z, yaw, pitch, gamemode, address, saveData);
+            ExternalPlayer.create(connection, gameProfile, world, x, y, z, yaw, pitch, gamemode, address, saveData, advancements, stats);
         });
     }
 
